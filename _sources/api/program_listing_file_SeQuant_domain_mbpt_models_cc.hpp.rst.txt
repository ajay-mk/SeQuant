
.. _program_listing_file_SeQuant_domain_mbpt_models_cc.hpp:

Program Listing for File cc.hpp
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_SeQuant_domain_mbpt_models_cc.hpp>` (``SeQuant/domain/mbpt/models/cc.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef SEQUANT_DOMAIN_MBPT_MODELS_CC_HPP
   #define SEQUANT_DOMAIN_MBPT_MODELS_CC_HPP
   
   #include <cstddef>
   #include <limits>
   #include <vector>
   
   namespace sequant {
   class ExprPtr;
   }
   
   namespace sequant::mbpt {
   
   class CC {
    public:
     enum class Ansatz {
       T,
       oT,
       U,
       oU
     };
   
     CC(size_t N, Ansatz ansatz = Ansatz::T);
   
     Ansatz ansatz() const;
   
     bool unitary() const;
   
     ExprPtr sim_tr(ExprPtr expr, size_t r);
   
     [[nodiscard]] std::vector<sequant::ExprPtr> t(
         std::size_t commutator_rank = 4,
         size_t pmax = std::numeric_limits<size_t>::max(), size_t pmin = 0);
   
     [[nodiscard]] std::vector<sequant::ExprPtr> λ(
         std::size_t commutator_rank = 4);
   
     // clang-format off
     // clang-format on
     [[nodiscard]] std::vector<sequant::ExprPtr> t_pt(size_t order, size_t rank);
   
     // clang-format off
     // clang-format on
     [[nodiscard]] std::vector<sequant::ExprPtr> λ_pt(size_t order, size_t rank);
   
    private:
     size_t N;
     Ansatz ansatz_ = Ansatz::T;
   };  // class CC
   
   }  // namespace sequant::mbpt
   
   #endif  // SEQUANT_DOMAIN_MBPT_MODELS_CC_HPP
